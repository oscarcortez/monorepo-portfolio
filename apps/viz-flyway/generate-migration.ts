import { writeFileSync, existsSync, mkdirSync } from 'fs';
import { join } from 'path';
import { program } from 'commander';

interface MigrationOptions {
  versioned?: boolean;
  description: string;
  directory?: string;
}

class MigrationGenerator {
  private readonly migrationsDir: string;

  constructor(baseDir: string = './migrations') {
    this.migrationsDir = baseDir;
    this.ensureDirectoryExists();
  }

  private ensureDirectoryExists(): void {
    if (!existsSync(this.migrationsDir)) {
      mkdirSync(this.migrationsDir, { recursive: true });
      console.log(`üìÅ Created migrations directory: ${this.migrationsDir}`);
    }
  }

  private generateTimestamp(): string {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    
    return `${year}${month}${day}${hours}${minutes}`;
  }

private formatDescription(description: string): string {
  return description
    .toLowerCase()
    .replace(/[^a-z0-9\s_-]/g, '') // Permite letras, n√∫meros, espacios, guiones y guiones bajos
    .replace(/[-\s]+/g, '_')       // Convierte guiones y espacios a guiones bajos
    .replace(/_{2,}/g, '_')        // Reemplaza m√∫ltiples guiones bajos consecutivos por uno solo
    .replace(/^_+|_+$/g, '')       // Elimina guiones bajos al inicio y final
    .trim();
}

  private generateVersionedFilename(description: string): string {
    const timestamp = this.generateTimestamp();
    const formattedDescription = this.formatDescription(description);
    return `V${timestamp}__${formattedDescription}.sql`;
  }

  private generateRepeatableFilename(description: string): string {
    const formattedDescription = this.formatDescription(description);
    return `R__${formattedDescription}.sql`;
  }

  private generateMigrationContent(description: string, isVersioned: boolean): string {
    const timestamp = new Date().toISOString();
    const migrationTitle = description.replace(/_/g, ' ').toUpperCase();
    
    return `-- Migration: ${migrationTitle}
-- Created: ${timestamp}
-- Type: ${isVersioned ? 'Versioned' : 'Repeatable'}
-- Description: ${description}

-- =====================================================
-- ${migrationTitle}
-- =====================================================

-- TODO: Add your SQL statements here | generated by luco üöÄ (delete this line)
`;
  }

  public generateMigration(options: MigrationOptions): string {
    const { versioned = true, description, directory } = options;
    
    if (!description) {
      throw new Error('Description is required');
    }

    const targetDir = directory || this.migrationsDir;
    
    if (directory && !existsSync(targetDir)) {
      mkdirSync(targetDir, { recursive: true });
    }

    const filename = versioned 
      ? this.generateVersionedFilename(description)
      : this.generateRepeatableFilename(description);
    
    const filepath = join(targetDir, filename);
    const content = this.generateMigrationContent(description, versioned);

    if (existsSync(filepath)) {
      throw new Error(`Migration file already exists: ${filepath}`);
    }

    writeFileSync(filepath, content, 'utf8');

    return filepath;
  }
}

// CLI Configuration
program
  .name('generate-migration')
  .description('Generate Flyway migration files')
  .version('1.0.0');

program
  .command('file')
  .description('Generate a new migration file')
  .option('--versioned', 'Create a versioned migration (default)', true)
  .option('--repeatable', 'Create a repeatable migration')
  .option('-d, --description <description>', 'Migration description (required)')
  .option('--directory <directory>', 'Target directory (default: ./migrations)')
  .action((options) => {
    try {
      const isVersioned = !options.repeatable;
      const generator = new MigrationGenerator(options.directory);
      
      const migrationOptions: MigrationOptions = {
        versioned: isVersioned,
        description: options.description,
        directory: options.directory
      };

      const filepath = generator.generateMigration(migrationOptions);
      
      console.log('üéâ Migration file created successfully!');
      console.log(`üìÑ File: ${filepath}`);
      console.log(`üìÖ Type: ${isVersioned ? 'Versioned' : 'Repeatable'}`);
      console.log(`üìù Description: ${options.description}`);
      console.log('\nüí° Next steps:');
      console.log('   1. Edit the generated SQL file');
      console.log('   2. Run: docker-compose up flyway');
      
    } catch (error) {
      console.error('‚ùå Error:', error instanceof Error ? error.message : error);
      process.exit(1);
    }
  });

// Parse CLI arguments
if (require.main === module) {
  program.parse();
}